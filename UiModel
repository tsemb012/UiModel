//UiModel 

class MyViewModel : ViewModel() {
    // UiModelを利用するときはMutable LiveDataの初期化時に初期データを入れてる。
    private val _textState = MutableLiveData<TextState>(TextState.Loading)
    // UiModelを利用するときはLiveData不要
    //val textState: LiveData<TextState> = _textState

    // UiModelを利用するときはMutable LiveDataの初期化時に初期データを入れてる。
    private val _listItems = MutableLiveData<List<String>>(listOf())
    // UiModelを利用するときはLiveData不要
    // val listItems = LiveData<List<String>> = _listItems

    val UiModel: LiveData<MyUiModel> by lazy {
        combine(//combine()とはなんぞや？
            MyUiModel(),
            _textState,
            _listItems
        ){
            current, textState, listItems ->
            MyUiModel(
                current = current,
                textState = textState,
                listItems = listItems
            )
        }
    }
    ...
}

sealed class TextState{//LiveDataに状態を持たせる
    data class Loaded(val text: String): TextState//データと状態を同時に持っている。
    object Loading: TextState //objectは単一インスタンスのみもつクラスを作るキーワード
}
//増えていくLiveDataをSealedクラスを用いて管理


class MyFragment: Fragment(){
    override fun onViewCreated(view: View, savedInstanceState: Bundle?){
        super.onViewCreated(view, savedInstanceState)
        myViewModel.TextState.observe(viewLifeCycleOwner){textState ->
            textView.text = when(textState){
                is TextState.Loading -> "loading"
                is TextState.Loaded -> textState.text//Loadedのデータクラスに入っているデータも直接引っ張れる。
                //sealed classなのでelseを書く必要がない。
            }
        }
                /*
        これが不要になりました。
        myViewModel.isLoading.observe(viewLifecycleOwner) {
        }
        */
    }
    ...
}
//ここにどんどんobject LoadError: TextState等を追加すれば、LiveDataが１つで状態を増やしていくことができる。


data class MyUiModel(//MyViewModel内のLiveDataをまとめるMyUiModelクラスを定義する。
    val textState: TextState = TextState.Loading,
    val listItems: List<String> = listOf()//LiveDataクラスじゃない？
){
    companion object {
        operator fun invoke(//() だけでメソッドを呼び出だすことができる。
            current: MyUiModel,//instance()はコンパイラにはinstance.invoke()と解釈されます。
            textState: TextState,
            listItems: List<String>
        )= MyUiModel(
            textState = textState,
            listItems = listItems
        )
    }
}